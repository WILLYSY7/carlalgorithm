'''

涉及到的题目
leetcode 406

'''
'''
leetcode 406
406. 根据身高重建队列
假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。
每个 people[i] = [hi, ki] 表示第 i 个人的身高为 hi ，前面 正好 有 ki 个身高大于或等于 hi 的人。

请你重新构造并返回输入数组 people 所表示的队列。返回的队列应该格式化为数组 queue ，
其中 queue[j] = [hj, kj] 是队列中第 j 个人的属性（queue[0] 是排在队列前面的人）。

示例 1：
输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
解释：
编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。
编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。
编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。
编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。
编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。

示例 2：
输入：people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]
输出：[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]
'''
class Solution:
    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:
        '''解题思路
    题目描述：整数对 (h, k) 表示，其中 h 是这个人的身高，k 是排在这个人前面且身高大于或等于 h 的人数。
    渔（套路）：一般这种数对，还涉及排序的，根据第一个元素正向排序，根据第二个元素反向排序，
                或者根据第一个元素反向排序，根据第二个元素正向排序，往往能够简化解题过程。
    在本题目中，我首先对数对进行排序，按照数对的元素 1 降序排序，按照数对的元素 2 升序排序。
    原因是，按照元素 1 进行降序排序，对于遍历的每一个元素，已经添加的所有元素均大于等于当前元素值，其前面有几个比它高的能立马看出来
    而按照第二个元素正向排序，我们希望 k 大的尽量在后面，减少插入操作的次数。
'''
        people.sort(key = lambda x:(-x[0], x[1])) # 对x[0]倒序排序，如果遇到相等的，则按照x[1]正序排序
        res = []
        for x in people:
            if x[1] >= len(res): # 前面比它高的人特别多，已经大于当前人数了，这个人就要放在队尾
                res.append(x)
            else:
                res.insert(x[1],x) # 此时队里有n个人高于或等于当前元素x，那么x[1]就是这个元素站的位置，因为前面有x[1]个人比它高
        return res