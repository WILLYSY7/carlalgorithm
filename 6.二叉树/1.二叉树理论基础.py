'''
二叉树理论基础
'''
'''
满二叉树
    一棵二叉树只有度为0的节点和度为2的节点，并且度为0度节点在同一层上，则这棵二叉树为满二叉树
    满二叉树有2**k-1个节点
    
完全二叉树
    除了底层节点可能没有填满，其余每层的节点数都达到最大值，并且底层度节点都集中在该层最左边的若干位置
    （即最底层可以不满，但是必须在最左边的位置，其他上层必须是满的）
    
二叉搜索树/二叉排序树/二叉查找树（有序树）
    二叉搜索树是有数值的，上面介绍的树都是没数值的。
    满足的规则有：
        若它的左子树不空，则左子树上所有的节点均小于它的根节点的值
        若它的右子树不空，在右子树上所有的节点均大于它的根节点的值
        它的左右子树也分别为二叉排序树

平衡二叉搜索树
    它是一棵空树，或者它的左右两个子树的高度差的绝对值不不超过1，并且左右两个子树都是一棵平衡二叉树

二叉树的存储方式：
    链式存储：利用两个指针，可以存在内存不连续的空间
    顺序存储：利用数组，只能存在内存连续的空间（对于数组存储，其下标从父节点i开始，左孩子是2*i+1，右孩子是2*i+2）
    
'''

'''
二叉树的遍历方式：
    dfs 深度优先遍历：先往深处遍历，遇到叶子节点时再往回遍历（递归法，迭代法）
        在深度优先中，前中后指的是中间节点的遍历顺序，只要记住前序，中序，后序指的是中间节点的位置即可
        -前序遍历 （中-左-右） 5412678
        -中序遍历 （左-中-右） 1425768
        -后序遍历 （左-右-中） 1247865
                    5
            4               6
        1        2      7        8
             
            
    bfs 广度优先遍历：一层一层地遍历（迭代法）
        -层次遍历
'''
# 二叉树的定义
class TreeNode:
    def __init__(self,value):
        self.value = value
        self.left = None
        self.right = None