'''

涉及到的题目
leetcode 121、122、123、188、309、714

'''
'''
leetcode 121
121. 买卖股票的最佳时机
给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。
你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。
返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。

示例 1：
输入：[7,1,5,3,6,4]
输出：5
解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。

示例 2：
输入：prices = [7,6,4,3,1]
输出：0
解释：在这种情况下, 没有交易完成, 所以最大利润为 0。
'''


class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        '''贪心算法，每次都保存最低价的股票，计算出当天卖出能获得的最大利润
        最终在获利数组里找出最大获利即可'''
        res = [0] * (len(prices) + 1)
        cur = prices[0]
        for i in range(1, len(prices)):
            if prices[i] > cur: res[i] = prices[i] - cur
            cur = min(cur, prices[i])
        return max(res)


# 动态规划，盈利和昨天比，股价也和昨天比
class Solution:
    '''动态规划'''

    def maxProfit(self, prices: List[int]) -> int:
        dp = [[0] * 2 for _ in range(len(prices))]
        dp[0][0], dp[0][1] = prices[0], 0  # 初始化，第一天的股价，以及第一天不盈利
        for i in range(1, len(prices)):
            dp[i][0] = min(prices[i], dp[i - 1][0])  # dp[i][0]记录当天的最低估价
            dp[i][1] = max(prices[i] - dp[i - 1][0], dp[i - 1][1])  # 记录按今天的股价卖昨天的股票，是否能赚更多的钱
        return dp[-1][-1]


'''
leetcode 122
122. 买卖股票的最佳时机 II
给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。
在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。
返回 你能获得的 最大 利润 。

示例 1：
输入：prices = [7,1,5,3,6,4]
输出：7
解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。
     总利润为 4 + 3 = 7 。

示例 2：
输入：prices = [1,2,3,4,5]
输出：4
解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
     总利润为 4 。

示例 3：
输入：prices = [7,6,4,3,1]
输出：0
解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0 。
'''


class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        dp = [[0, 0]] * len(prices)
        # dp[i][0] 第i天交易完 手里持有一只股剩下的钱
        # dp[i][1] 第i天交易完 手里没有股票剩下的钱
        dp[0][0], dp[0][1] = -prices[0], 0
        for i in range(1, len(prices)):
            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] - prices[i])
            # 如果拿昨天的利润买今天的股票亏了，那就不买今天的股票，持有昨天的原股
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + prices[i])
            # 如果把昨天的股票以今天的价格卖了还亏钱，那就不卖，等价格涨了再卖
        return dp[-1][-1]


'''
leetcode 123
123. 买卖股票的最佳时机 III
给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:
输入：prices = [3,3,5,0,0,3,1,4]
输出：6
解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。

示例 2：
输入：prices = [1,2,3,4,5]
输出：4
解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。

示例 3：
输入：prices = [7,6,4,3,1] 
输出：0 
解释：在这个情况下, 没有交易完成, 所以最大利润为 0。

示例 4：
输入：prices = [1]
输出：0
'''


class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        # 正向遍历一次可以得到从0到i天只买卖一次获得的最大价值
        # 反向遍历一次可以得到从i到最后一天只买卖一次获得的最大价值
        # 将每一天获得的最大价值加起来，返回最大的那一天即可
        n = len(prices)
        if n <= 1: return 0
        dp1 = [0 for _ in range(n)]
        dp2 = [0 for _ in range(n)]
        dp1[0], dp2[-1] = 0, 0
        min_price = prices[0]
        max_price = prices[-1]
        for i in range(1, n):
            dp1[i] = max(dp1[i - 1], prices[i] - min_price)
            min_price = min(min_price, prices[i])
        for j in range(n - 2, -1, -1):
            dp2[j] = max(dp2[j + 1], max_price - prices[j])
            max_price = max(max_price, prices[j])
        return max(dp1[k] + dp2[k] for k in range(n))


class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        # 第i天只有4个状态，分别对应着dp[i][0~3]，其中
        #     dp[i][0]表示只进行过一次买操作；
        #     dp[i][1]表示进行了一次买操作和一次卖操作，即完成了一笔交易；
        #     dp[i][2]表示在完成了一笔交易的前提下，进行了第二次买操作；
        #     dp[i][3]表示完成了全部两笔交易。
        n = len(prices)
        dp = [[0 for _ in range(4)] for _ in range(n)]
        dp[0][0] = - prices[0]
        # 初始化肯定要先买一支股票，所以是-prices[0]
        dp[0][1] = 0
        # 买了再卖出，相当于没有赚钱，所以完成一笔交易不赚钱
        dp[0][2] = - prices[0]
        # 第二次买入依赖于第一次卖出的状态，其实相当于第0天第一次买入了，第一次卖出了，然后在买入一次（第二次买入），
        # 那么现在手头上没有现金，只要买入，现金就做相应的减少。
        dp[0][3] = 0
        # 在头一天完成两笔一样的操作，仍然不亏不赚
        for i in range(1, n):
            dp[i][0] = max(dp[i - 1][0], -prices[i])
            # 第i天第一次买入可以保持昨天不变，不操作；也可以买入今天的股价，取最大价值，
            # 由于只能做两笔交易，所以如果第一次的交易，那么一定是0-prices[i]
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + prices[i])
            # 第i天进行一次卖操作，可以选择不卖，维持昨天的价值。
            # 也可以选择卖，那就是昨天买入股票后剩余的价值再加上今天卖股票所获得的价值总和
            dp[i][2] = max(dp[i - 1][2], dp[i - 1][1] - prices[i])
            # 我们完成了一笔交易，已经赚到了钱，所以第二笔交易就要利用第一笔交易赚的钱，
            # 假设今天的股价比较低，那么就用第一笔赚来的钱买入股票，如果股价很高就保持原样。
            dp[i][3] = max(dp[i - 1][3], dp[i - 1][2] + prices[i])
            # 同时由于我们完成了第一笔交易，也完成了买第二只股票的操作，
            # 那么在卖的时候可以选择在股价高的时候卖掉赚取更多的钱，也可以保持原样。
        return dp[-1][-1]


class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if prices == []:
            return 0
        length = len(prices)
        # 结束时的最高利润=[天数][是否持有股票][卖出次数]
        dp = [[[0, 0, 0], [0, 0, 0]] for i in range(0, length)]
        # 第一天休息
        dp[0][0][0] = 0
        # 第一天买入
        dp[0][1][0] = -prices[0]
        # 第一天不可能已经有卖出
        dp[0][0][1] = float('-inf')
        dp[0][0][2] = float('-inf')
        # 第一天不可能已经卖出
        dp[0][1][1] = float('-inf')
        dp[0][1][2] = float('-inf')
        for i in range(1, length):
            # 未持股，未卖出过，说明从未进行过买卖
            dp[i][0][0] = 0
            # 未持股，卖出过1次，可能是今天卖的，可能是之前卖的
            dp[i][0][1] = max(dp[i - 1][1][0] + prices[i], dp[i - 1][0][1])
            # 未持股，卖出过2次，可能是今天卖的，可能是之前卖的
            dp[i][0][2] = max(dp[i - 1][1][1] + prices[i], dp[i - 1][0][2])
            # 持股，未卖出过，可能是今天买的，可能是之前买的
            dp[i][1][0] = max(dp[i - 1][0][0] - prices[i], dp[i - 1][1][0])
            # 持股，卖出过1次，可能是今天买的，可能是之前买的
            dp[i][1][1] = max(dp[i - 1][0][1] - prices[i], dp[i - 1][1][1])
            # 持股，卖出过2次，不可能
            dp[i][1][2] = float('-inf')
        return max(dp[length - 1][0][1], dp[length - 1][0][2], 0)


'''
leetcode 188
188. 买卖股票的最佳时机 IV
给定一个整数数组 prices ，它的第 i 个元素 prices[i] 是一支给定的股票在第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1：
输入：k = 2, prices = [2,4,1]
输出：2
解释：在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。

示例 2：
输入：k = 2, prices = [3,2,6,5,0,3]
输出：7
解释：在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。
     随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。
'''


class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        if k == 0 or not prices: return 0
        n = len(prices)
        dp = [[0 for _ in range(2 * k + 1)] for _ in range(n)]
        # 这里dp多加了一列，这一列代表着第i天什么都没做，所以利润永远是0，为了方便之后的递归公式推导更为便捷
        for i in range(1, 2 * k, 2):
            dp[0][i] = -prices[0]  # 初始化，奇数买入，偶数卖出
        '''达到dp[i][1]状态，有两个具体操作：
            操作一：第i天买入股票了，那么dp[i][1] = dp[i - 1][0] - prices[i]
            操作二：第i天没有操作，而是沿用前一天买入的状态，即：dp[i][1] = dp[i - 1][1]
            选最大的，所以 dp[i][1] = max(dp[i - 1][0] - prices[i], dp[i - 1][1]);

            同理dp[i][2]也有两个操作：
            操作一：第i天卖出股票了，那么dp[i][2] = dp[i - 1][1] + prices[i]
            操作二：第i天没有操作，沿用前一天卖出股票的状态，即：dp[i][2] = dp[i - 1][2]
            所以dp[i][2] = max(dp[i - 1][1] + prices[i], dp[i - 1][2])'''
        for i in range(1, n):
            for j in range(0, 2 * k - 1, 2):
                dp[i][j + 1] = max(dp[i - 1][j + 1], dp[i - 1][j] - prices[i])  # 奇数买
                dp[i][j + 2] = max(dp[i - 1][j + 2], dp[i - 1][j + 1] + prices[i])  # 偶数卖
        return dp[-1][-1]


'''
leetcode 309
309. 最佳买卖股票时机含冷冻期
给定一个整数数组prices，其中第  prices[i] 表示第 i 天的股票价格 。
设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:
卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:
输入: prices = [1,2,3,0,2]
输出: 3 
解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]

示例 2:
输入: prices = [1]
输出: 0

'''


class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        if n == 1:
            return 0
        elif n == 2:
            return max(0, prices[1] - prices[0])
        dp = [[0 for _ in range(2)] for _ in range(n)]
        dp[0][0], dp[0][1] = -prices[0], 0
        dp[1][0], dp[1][1] = max(dp[0][0], dp[0][1] - prices[1]), max(dp[0][1], dp[0][0] + prices[1])
        for i in range(2, n):
            dp[i][0] = max(dp[i - 1][0], dp[i - 2][1] - prices[i])
            # 买股票只有两种选择，
            # 第一种是不买，保持今天的钱和昨天剩的钱一样

            # 第二种是买，买的话就要分情况，
            # 如果昨天刚好卖完股票，那么就遇到冻结期今天不能购买，非得购买那就只能在前天没卖的基础上买股票dp[i-2][1]-prices[i]
            # 昨天没有卖股票的话，那今天买股票应该是dp[i-1][1]-prices[i]，
            # 但是我们知道由于昨天没有卖股票，所以dp[i-1]的值一定是dp[i-2]传承过来的
            # 所以两种情况的公式可以变成一种，即dp[i-2][1]-prices[i]
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + prices[i])
            # 卖股票只有两种选择，一种是不卖，继续保持昨天的利润（dp[i-1][1]）；
            # 一种是卖股票，那就用昨天买完股票剩余的钱加上今天卖完股票获得的钱
        return dp[-1][-1]


'''
leetcode 714
714. 买卖股票的最佳时机含手续费
给定一个整数数组 prices，其中 prices[i]表示第 i 天的股票价格 ；整数 fee 代表了交易股票的手续费用。
你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。
返回获得利润的最大值。
注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。

示例 1：
输入：prices = [1, 3, 2, 8, 4, 9], fee = 2
输出：8
解释：能够达到的最大利润:  
在此处买入 prices[0] = 1
在此处卖出 prices[3] = 8
在此处买入 prices[4] = 4
在此处卖出 prices[5] = 9
总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8

示例 2：
输入：prices = [1,3,7,5,10,3], fee = 3
输出：6

'''


class Solution:
    def maxProfit(self, prices: List[int], fee: int) -> int:
        n = len(prices)
        if n == 1:
            return 0
        elif n == 2:
            return max(0, prices[1] - prices[0] - fee)
        dp = [[0, 0] for _ in range(n)]
        dp[0][0], dp[0][1] = -prices[0], 0
        for i in range(1, n):
            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] - prices[i])
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + prices[i] - fee)  # 每次进行卖股票的交易减去手续费fee即可
        return dp[-1][-1]