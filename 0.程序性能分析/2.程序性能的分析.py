'''
1、时间复杂度分析
    什么是时间复杂度：假设算法的数据规模为n，操作单元数量为f(n)，随着数据规模n的增大，
                    算法时间的增长率和f(n)的增长率相同，这个增长趋势成为算法的时间复杂度，记为O(f(n))

    O代表什么：O用来表示上界，当算法最坏情况下运行时的上界。

    为什么忽略常数项：因为O就是在数据量级突破一个点且数据量级特别大的情况下表现出来的时间复杂度，
                    此时常数项所引起的变化非常小，可以忽略不计
                    假如常数项为10^7,10^8等很大的数，则必须考虑常数项

    时间复杂度排行：
        O(1)常数阶<O(logn)对数阶<O(n)线性阶<O(n^2)平方阶<O(n^3)立方阶<O(2^n)指数阶

2、时间复杂度的简化
    去掉加法常数项：O(2n^2+10n+1000) ---> O(2n^2+10n)
    去掉常数系数：O(2n^2+10n) ---> O(n^2+n)
    只保留最高项：O(n^2+n) --->O(n^2)

3、logn中log以什么为底数
    一般来说，以什么数为底数都可以，忽略对底数的描述。因为可以用对数恒等式，始终将表达式变换成‘常数*以i为底n的对数’，常数项可忽略（见2）

4、空间复杂度
    什么是空间复杂度：类似于时间复杂度，空间复杂度是算法内存空间增长趋势的表示
    通常用O(1). O(n). O(n^2)

    一般来说，O(1)就是单纯的数字计算等
    O(n)n个元素的数组运算
    O(n^2)一个横竖都为n的二维矩阵的运算
'''
