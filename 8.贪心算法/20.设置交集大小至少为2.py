'''

涉及到的题目
leetcode 757

'''
'''
leetcode 757
757. 设置交集大小至少为2
一个整数区间 [a, b]  ( a < b ) 代表着从 a 到 b 的所有连续整数，包括 a 和 b。
给你一组整数区间intervals，请找到一个最小的集合 S，使得 S 里的元素与区间intervals中的每一个整数区间都至少有2个元素相交。
输出这个最小集合S的大小。

示例 1:
输入: intervals = [[1, 3], [1, 4], [2, 5], [3, 5]]
输出: 3
解释:
考虑集合 S = {2, 3, 4}. S与intervals中的四个区间都有至少2个相交的元素。
且这是S最小的情况，故我们输出3。

示例 2:
输入: intervals = [[1, 2], [2, 3], [2, 4], [4, 5]]
输出: 5
解释:
最小的集合S = {1, 2, 3, 4, 5}.
'''
from typing import  List
class Solution:
    def intersectionSizeTwo(self, intervals: List[List[int]]) -> int:
        if not intervals: return 0
        intervals.sort(key = lambda x: (x[0], -x[1]))
        # 以x[0]升序排列，如果遇到x[0]相同，则按x[1]降序排列
        #   为什么要进行一个升序一个降序的操作，
        #    （首先对于只求重叠区间的话，直接按照x[0]的升序排列即可‘452. 用最少数量的箭引爆气球’）
        # 这道题先以第一个元素进行升序，可以保证最后一个元素的区间范围一定是处于最右边的
        # 这个时候假如x[0]相同那么按照x[-1]降序排列，例如最后两个区间是[5,10],[5,8] （[[2,3]，[3,4]，[5,10]，[5,8]]）
        # 这样排列的好处就是只要满足有两个元素在5,8这个区间里面，那么其一定也在5,10这个大区间里面，从后向前遍历时可以不用考虑
        # 所以初始化的时候我们贪心地选择第n个元素的左区间5，以及5+1=6作为两个重叠元素，尽可能向左边靠，以满足其他区间重叠的要求
        # 这个时候我们再分析第n-1个元素的右区间，会有三种情况：
        #   1.n-1的右区间小于5， 例如[3,4] [5,8]，很明显，4 < 5,
        #       说明此时需要四个重叠元素，res += 2，同时更新初始化，一个为3，一个为3+1=4
        #   2.n-1的右区间大于等于6，例如[5,10] [5,8]，很明显，10 > 6,
        #       此时5,6已经满足两个区间共同重叠两个元素的需求，那么就不变，进入下一个循环
        #   3.n-1的右区间大于等于5，小于6， 例如[1,5.9] [5,8]，此时5 < 5.9 < 6,
        #       此时要3个元素才能同时满足题目要求，res += 1，更新初始化，原本的6接替5的位置，原本的5变成n-1的左区间，
        #       贪心地向左延伸以获得更大的重叠范围
        res = 2
        pre, post = intervals[-1][0], intervals[-1][0] + 1
        for left, right in reversed(intervals[:-1]):
            if right >= post:
                continue
            elif right < pre:
                res += 2
                pre = left
                post = left + 1
            elif pre <= right < post:
                res += 1
                post = pre
                pre = left
        return res
